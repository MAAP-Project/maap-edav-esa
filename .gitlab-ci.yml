image: node:12.16.3

cache:
  untracked: true
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
  policy: pull

stages:
  - setup
  - build
  - test
  - publish

install_dependencies:
  stage: setup
  cache:
    untracked: true
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - node_modules/
    policy: pull-push
  script:
    - npm_nexus_login
    - npm ci

build:
  stage: build
  artifacts:
    paths:
      - "dist"
    expire_in: 1 hr
  script:
    - npm run build -- --env baseUrl='{{ getenv "BASE_URL"}}' --env appVersion=${VERSION_TAG}

lint:
  stage: test
  script:
    - npm run lint
  dependencies: []
  only:
    - branches
  except:
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG


publish:
  stage: publish
  image: docker:18.09.9
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09.9-dind
  script:
    - setup_docker
    - build_docker_image
  dependencies:
    - build
  when: manual


.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  export VERSION_TAG=$(if [ "$CI_COMMIT_TAG" == "" ]; then echo $CI_COMMIT_REF_SLUG.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA; else echo ${CI_COMMIT_TAG}; fi)

  function npm_nexus_login() {
    echo @oida:registry=https://$NEXUS_REPO/ > ~/.npmrc
    echo //$NEXUS_REPO/:_auth=$NEXUS_AUTH_TOKEN >> ~/.npmrc
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }


  function registry_login() {
    if [[ -n "$DOCKER_REGISTRY_USERNAME" ]]; then
      echo "Logging to Docker Registry..."
      docker login -u "$DOCKER_REGISTRY_USERNAME" -p "$DOCKER_REGISTRY_PASSWORD" "$DOCKER_REGISTRY_URL"
      echo ""
    fi
  }

  function build_docker_image() {
    registry_login

    DOCKER_IMAGE=$DOCKER_REGISTRY_URL/maap-edav-ui
    DOCKER_TAG=$DOCKER_IMAGE:$VERSION_TAG
    echo "Building docker image..."
    docker build \
        --build-arg HTTP_PROXY="$HTTP_PROXY" \
        --build-arg http_proxy="$http_proxy" \
        --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
        --build-arg https_proxy="$https_proxy" \
        --build-arg FTP_PROXY="$FTP_PROXY" \
        --build-arg ftp_proxy="$ftp_proxy" \
        --build-arg NO_PROXY="$NO_PROXY" \
        --build-arg no_proxy="$no_proxy" \
        -t "$DOCKER_TAG" -t "$DOCKER_IMAGE:latest" .

    echo "Pushing image to docker registry..."
    docker push "$DOCKER_IMAGE"
    echo ""
  }


before_script:
  - *auto_devops
